// aliases

alias doubles doubleDash|doubleEqual
alias styledTexts asteriskText|underscoreText|doubleAsteriskText|doubleUnderscoreText
alias rawText symbol|space|doubles|code|math
alias contentText text|styledTexts|link
alias textual contentText|rawText
alias lineSymbols dash|plus|sharp
alias listSymbols asterisk|dash|plus
alias spaceLists spaceUnorderedList|spaceOrderedList
alias spaceListSinlge spaceOrderedListItem|spaceUnorderedListItem
alias listBlockItems spaceLists|lists|textual|line|newline
alias pipes pipe|pipeSpace|spacePipe|spacePipeSpace
alias lists orderedList|unorderedList
alias listsSingle orderedListItem|unorderedListItem
alias allLists lists|listsSingle|spaceLists|spaceListSinlge
alias blockRules line|code|table|allLists|image|blockquote|heading

// keywords

multiDash dash => multiDash { count: left.count + 1 }
doubleDash dash => multiDash { count: 3 }
dash dash => doubleDash

multiEqual equal => multiEqual { count: left.count + 1 }
doubleEqual equal => multiEqual { count: 3 }
equal equal => doubleEqual

asterisk asterisk => doubleAsterisk { raw: '**' }
underscore underscore => doubleUnderscore { raw: '__' }

asterisk asteriskEnder => asteriskEnd { raw: '*' }
doubleAsterisk asteriskEnder => doubleAsteriskEnd { raw: '**' }
underscore underscoreEnder => underscoreEnd { raw: "_" }
doubleUnderscore asteriskEnder => doubleUnderscoreEnd { raw: "__" }

integer dot => orderedListSymbol { itemNumber: left.raw }
space orderedListSymbol => spaceOrderedListSymbol { spaces: left.raw, itemNumber: right.itemNumber }
space listSymbols => spaceListSymbol { spaces: left.raw }

// image
exclamation link => image { content: right.content }

// link
bracket parentheses => link { content: { title: left, href: right } }

// text

textual textual => text { content: [left, right] }
textual lineSymbols => text { content: [left, right] }

textual newline => line { content: [left] }
textual newline => line { content: [left] }
line text => text { content: [...left.content, right] }
line line => line { content: [...left.content, ...right.content] }

// wrapped text

underscore textual => underscoreTextStart { content: [right] }
underscoreTextStart textual => underscoreTextStart { content: [...left.content, right] }
underscoreTextStart underscoreEnd => underscoreText { content: [...left.content] }

asterisk textual => asteriskTextStart { content: [right] }
asteriskTextStart textual => asteriskTextStart { content: [...left.content, right] }
asteriskTextStart asteriskEnd => asteriskText { content: [...left.content] }

doubleAsterisk textual => doubleAsteriskTextStart { content: [right] }
doubleAsteriskTextStart textual => doubleAsteriskTextStart { content: [...left.content, right] }
doubleAsteriskTextStart doubleAsteriskEnd => doubleAsteriskText { content: [...left.content] }

doubleUnderscore textual => doubleUnderscoreTextStart { content: [right] }
doubleUnderscoreTextStart textual => doubleUnderscoreTextStart { content: [...left.content, right] }
doubleUnderscoreTextStart doubleUnderscoreEnd => doubleUnderscoreText { content: [...left.content] }

// multisharp

multisharp sharp => multisharp { count: left.count + 1 }
sharp sharp => multisharp { count: 2 }

// headings

sharp line => heading { level: 1, content: right }
multisharp line => heading { level: left.count, content: right }

// blockquote

angleRight line => blockquote { content: right.content }
blockquote blockquote => blockquote { content: [...left.content, ...right.content] }

// tables

space pipeSpace => spacePipeSpace { raw: left.raw + right.raw }
pipe space => pipeSpace { raw: left.raw + right.raw }
space pipe => spacePipe { raw: left.raw + right.raw }

pipes multiDash => subHeaderCell {}
multiDash pipes => subHeaderCell {}
subHeaderRow pipes => subHeaderRow { cells: left.cells }
subHeaderRow subHeaderCell => subHeaderRow { cells: [left.cells, right] }
subHeaderCell subHeaderCell => subHeaderRow { cells: [left, right] }

pipes textual => tableCell { content: right }
textual pipes => tableCell { content: left }
tableCell pipes => tableCell { content: left.content }
tableRow tableCell => tableRow { cells: [left.cells, right], type: "td" }
tableCell tableCell => tableRow { cells: [left, right], type: "td" }

tableRow newline => tableRowLine { row: left }
subHeaderRow newline => subheaderRowLine { row: left }

table tableRowLine => table { header: left.header, rows: [...left.rows, right.row] }
tableRowLine subheaderRowLine => table { header: { ...left, row: { ...left.row, type: "th" } }, rows: [] }

// listBlock

line indent => listBlockStart { content: [left]}

// space lists

spaceListSymbol line|listBlock => spaceUnorderedListItem { content: right }
spaceOrderedListSymbol line|listBlock => spaceOrderedListItem { content: right }

spaceOrderedListItem spaceOrderedList => spaceOrderedList { content: [left, ...right.content]}
spaceOrderedList spaceOrderedListItem => spaceOrderedList { content: [...left.content, right]}
spaceOrderedListItem spaceOrderedListItem => spaceOrderedList { content: [left, right]}

spaceUnorderedListItem spaceUnorderedList => spaceUnorderedList { content: [left, ...right.content]}
spaceUnorderedList spaceUnorderedListItem => spaceUnorderedList { content: [...left.content, right]}
spaceUnorderedListItem spaceUnorderedListItem => spaceUnorderedList { content: [left, right]}

// lists

listSymbols line|listBlock => unorderedListItem { content: right }
orderedListSymbol line|listBlock => orderedListItem { content: right }

orderedListItem orderedList => orderedList { content: [left, ...right.content]}
orderedList orderedListItem => orderedList { content: [...left.content, right]}
orderedListItem orderedListItem => orderedList { content: [left, right]}

unorderedListItem unorderedList => unorderedList { content: [left, ...right.content]}
unorderedList unorderedListItem => unorderedList { content: [...left.content, right]}
unorderedListItem unorderedListItem => unorderedList { content: [left, right]}

// listBlock

indent listBlockItems => listBlockStart { content: [right]}
listBlockStart listBlockItems => listBlockStart { content: [...left.content, right]}
listBlockStart dedent => listBlock { content: left.content }

// blocks

block newline => block { content: left.content }
blockRules newline => block { content: [left] }

// this should finish the parsing process
document eof => beandown { blocks: left.blocks }

// document

document block => document { blocks: [...left.blocks, right]}
document blockRules => document { blocks: [ ...left.blocks, { name:"block", content: [right] } ] }
block block => document { blocks: [left, right]}
block blockRules => document { blocks: [left, { name:"block", content: [right] }]}
blockRules block => document { blocks: [{ name:"block", content: [left] }, right]}

block eof => beandown { blocks: [left] }
